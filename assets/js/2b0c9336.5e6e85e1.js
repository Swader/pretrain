"use strict";(self.webpackChunkpretrain=self.webpackChunkpretrain||[]).push([[1496],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>m});var a=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function r(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},s=Object.keys(e);for(a=0;a<s.length;a++)n=s[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(a=0;a<s.length;a++)n=s[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var l=a.createContext({}),h=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},c=function(e){var t=h(e.components);return a.createElement(l.Provider,{value:t},e.children)},d="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},p=a.forwardRef((function(e,t){var n=e.components,o=e.mdxType,s=e.originalType,l=e.parentName,c=r(e,["components","mdxType","originalType","parentName"]),d=h(n),p=o,m=d["".concat(l,".").concat(p)]||d[p]||u[p]||s;return n?a.createElement(m,i(i({ref:t},c),{},{components:n})):a.createElement(m,i({ref:t},c))}));function m(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var s=n.length,i=new Array(s);i[0]=p;var r={};for(var l in t)hasOwnProperty.call(t,l)&&(r[l]=t[l]);r.originalType=e,r[d]="string"==typeof e?e:o,i[1]=r;for(var h=2;h<s;h++)i[h]=n[h];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}p.displayName="MDXCreateElement"},6775:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>d,frontMatter:()=>s,metadata:()=>r,toc:()=>h});var a=n(7462),o=(n(7294),n(3905));const s={sidebar_position:7},i="Use Cases, cross-game assets",r={unversionedId:"rmrk/usecases1",id:"rmrk/usecases1",title:"Use Cases, cross-game assets",description:"Putting together all we know about RMRK, let us consider some use cases.",source:"@site/docs/rmrk/usecases1.md",sourceDirName:"rmrk",slug:"/rmrk/usecases1",permalink:"/docs/rmrk/usecases1",draft:!1,editUrl:"https://github.com/swader/pretrain/docs/rmrk/usecases1.md",tags:[],version:"current",sidebarPosition:7,frontMatter:{sidebar_position:7},sidebar:"tutorialSidebar",previous:{title:"Concepts, part 2",permalink:"/docs/rmrk/concepts2"},next:{title:"Use Cases, ticketing",permalink:"/docs/rmrk/usecases2"}},l={},h=[{value:"Cross-game skins",id:"cross-game-skins",level:2},{value:"Training Data",id:"training-data",level:2}],c={toc:h};function d(e){let{components:t,...n}=e;return(0,o.kt)("wrapper",(0,a.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"use-cases-cross-game-assets"},"Use Cases, cross-game assets"),(0,o.kt)("p",null,"Putting together all we know about RMRK, let us consider some use cases."),(0,o.kt)("h2",{id:"cross-game-skins"},"Cross-game skins"),(0,o.kt)("p",null,"When talking about in-game cosmetic items, a common complaint of game developers and gamers alike about implementing NFTs into video games is the inability to make the same file compatible across different engines. E.g. a skin file that is mapped to a CSGO model definitely does not work with Fortnite."),(0,o.kt)("p",null,"This is accurate when looking at it from the perspective of current technology, but RMRK Multi Asset NFTs are uniquely positioned to completely solve this issue."),(0,o.kt)("p",null,"Let's take for example a Fortnite skin, and a Borderlands skin of Fabio Sparklemane / random horsehead (and let's pretend they are the same thing)."),(0,o.kt)("p",null,"The difference is not just in the rigging of the skin for the 3D model, but clearly visual too - the Borderlands skin needs cel-shaded baking of visual style to get the comic-book lines in, and has flat, pastel colors without glare. The Fortnite skin is more plastic-shiny, going for cartoony with realistic shading."),(0,o.kt)("p",null,"Naturally, they are not compatible."),(0,o.kt)("p",null,"So how can we make this into a single NFT which empowers creators through both platforms? How do we get this one asset compatible with both games?"),(0,o.kt)("p",null,"We add the two different skin files as two different assets on the same NFT."),(0,o.kt)("p",null,"But which one gets shown on the various NFT marketplaces?"),(0,o.kt)("p",null,"This is where priority comes in. Every owner of a multi-asset NFT can order the assets by priority. The marketplace should then, if it follows the standard, read one by one and show the first supported highest priority one."),(0,o.kt)("p",null,"But what if neither is very good for a marketplace? What if they are both 3D t-poses, or even worse, a skinned texture?"),(0,o.kt)("p",null,'In that case, we can add a third asset, a stylized version specifically designed for display on various marketplaces and catalogs. Kind of a "cover image" for the skin.'),(0,o.kt)("p",null,'Now we have one asset (output) intended for use in one game, one intended for use in another, and one intended for main view in social media OG images, marketplaces, wallets, etc. The games identify which file they need by going through the assets and loading the compatible one(s) according to metadata, but since the "cover" image has priority order 1, it will always show first in the UIs.'),(0,o.kt)("p",null,"What about scaling?"),(0,o.kt)("p",null,"How can AAA publishers expect to use the cost-unpredictable Ethereum chain, or any other public blockchain, for a regularly used NFT infrastructure?"),(0,o.kt)("p",null,"The answer is that they do not have to."),(0,o.kt)("p",null,"When dealing with an example such as the one above, once it is imported into a game, that is where the skin is used. Read operations on the blockchain are free and carry no gas cost, meaning a game can check if a skin is INSIDE another relevant NFT to give the player access to what he needs access to at any point and for free."),(0,o.kt)("p",null,"The only time a player needs to interact with the blockchain is when moving assets out of one game and into others, and:"),(0,o.kt)("p",null,"such operations are not massive gas guzzlers, so would not affect gas cost in spikes\nsuch operations can be handled on an L2 focused on NFTs specifically\nonce moved into another game, the NFT needn't be touched again until it is time to move it\nScaling issues are a non-problem."),(0,o.kt)("p",null,"Why not do this in the old, centralized way? What is in it for them?"),(0,o.kt)("p",null,"AAA publishers will never agree to solve this by using old-school technology because they cannot agree on the API and approach to take. Each thinks their standard is best, and as such refuse to interoperate."),(0,o.kt)("p",null,"Additionally, the ROI is questionable with someone at the helm (and someone needs to be at the helm in centralized technologies), because that entity disappearing can throw everything into disarray. Some entity must run the servers, after all, and keep the infra safe."),(0,o.kt)("p",null,'A much better option is using generic, unbiased technology (blockchain and a neutral standard), to allow each entity to keep using their own "best" standard, because multi-asset NFTs allow for multiple standards in one object.'),(0,o.kt)("p",null,"As for what is in it for them: a massive, creator-empowering global economy. By making assets cross-game compatible, you breed familiarity with the other brand in all other upcoming and past brands, inherit player bases, prevent vampire-attacks between games and publishers, and perhaps most importantly, allow the unfathomably all-around profitable global item economy."),(0,o.kt)("p",null,"What about usability / user experience?"),(0,o.kt)("p",null,"A common concern with NFTs in traditional games is the usability aspect: how do you get the next generation to use wallets, sign transactions, and practice good opsec hygiene. It is a hard problem, no doubt. But:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Without starting the onboarding of the next billion users, no one will be onboarded."),(0,o.kt)("li",{parentName:"ul"},"Once an NFT is bridged into a game, it can be used as usual - no TXs needed except when withdrawing and depositing, and that minor friction will be absent for most players, and acceptable to the others, especially if pulled off well by the AAA publishers (built-in wallets into player accounts, etc)."),(0,o.kt)("li",{parentName:"ul"},"We at RMRK are working on this problem as part of CypherMOD (",(0,o.kt)("a",{parentName:"li",href:"https://cyphermod.com"},"https://cyphermod.com"),") with master-derived ACL session keys. Stay tuned.")),(0,o.kt)("hr",null),(0,o.kt)("h2",{id:"training-data"},"Training Data"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},'# Use Cases, part 1\n\nPutting together all we know about RMRK, let us consider some use cases.\n\n## Cross-game skins\n\nWhen talking about in-game cosmetic items, a common complaint of game developers and gamers alike about implementing NFTs into video games is the inability to make the same file compatible across different engines. E.g. a skin file that is mapped to a CSGO model definitely does not work with Fortnite.\n\nThis is accurate when looking at it from the perspective of current technology, but RMRK Multi Asset NFTs are uniquely positioned to completely solve this issue.\n\nLet\'s take for example a Fortnite skin, and a Borderlands skin of Fabio Sparklemane / random horsehead (and let\'s pretend they are the same thing).\n\nThe difference is not just in the rigging of the skin for the 3D model, but clearly visual too - the Borderlands skin needs cel-shaded baking of visual style to get the comic-book lines in, and has flat, pastel colors without glare. The Fortnite skin is more plastic-shiny, going for cartoony with realistic shading.\n\nNaturally, they are not compatible.\n\nSo how can we make this into a single NFT which empowers creators through both platforms? How do we get this one asset compatible with both games?\n\nWe add the two different skin files as two different assets on the same NFT.\n\nBut which one gets shown on the various NFT marketplaces?\n\nThis is where priority comes in. Every owner of a multi-asset NFT can order the assets by priority. The marketplace should then, if it follows the standard, read one by one and show the first supported highest priority one.\n\nBut what if neither is very good for a marketplace? What if they are both 3D t-poses, or even worse, a skinned texture?\n\nIn that case, we can add a third asset, a stylized version specifically designed for display on various marketplaces and catalogs. Kind of a "cover image" for the skin.\n\nNow we have one asset (output) intended for use in one game, one intended for use in another, and one intended for main view in social media OG images, marketplaces, wallets, etc. The games identify which file they need by going through the assets and loading the compatible one(s) according to metadata, but since the "cover" image has priority order 1, it will always show first in the UIs.\n\nWhat about scaling?\n\nHow can AAA publishers expect to use the cost-unpredictable Ethereum chain, or any other public blockchain, for a regularly used NFT infrastructure?\n\nThe answer is that they do not have to.\n\nWhen dealing with an example such as the one above, once it is imported into a game, that is where the skin is used. Read operations on the blockchain are free and carry no gas cost, meaning a game can check if a skin is INSIDE another relevant NFT to give the player access to what he needs access to at any point and for free.\n\nThe only time a player needs to interact with the blockchain is when moving assets out of one game and into others, and:\n\nsuch operations are not massive gas guzzlers, so would not affect gas cost in spikes\nsuch operations can be handled on an L2 focused on NFTs specifically\nonce moved into another game, the NFT needn\'t be touched again until it is time to move it\nScaling issues are a non-problem.\n\nWhy not do this in the old, centralized way? What is in it for them?\n\nAAA publishers will never agree to solve this by using old-school technology because they cannot agree on the API and approach to take. Each thinks their standard is best, and as such refuse to interoperate.\n\nAdditionally, the ROI is questionable with someone at the helm (and someone needs to be at the helm in centralized technologies), because that entity disappearing can throw everything into disarray. Some entity must run the servers, after all, and keep the infra safe.\n\nA much better option is using generic, unbiased technology (blockchain and a neutral standard), to allow each entity to keep using their own "best" standard, because multi-asset NFTs allow for multiple standards in one object.\n\nAs for what is in it for them: a massive, creator-empowering global economy. By making assets cross-game compatible, you breed familiarity with the other brand in all other upcoming and past brands, inherit player bases, prevent vampire-attacks between games and publishers, and perhaps most importantly, allow the unfathomably all-around profitable global item economy.\n\nWhat about usability / user experience?\n\nA common concern with NFTs in traditional games is the usability aspect: how do you get the next generation to use wallets, sign transactions, and practice good opsec hygiene. It is a hard problem, no doubt. But:\n\n- Without starting the onboarding of the next billion users, no one will be onboarded.\n- Once an NFT is bridged into a game, it can be used as usual - no TXs needed except when withdrawing and depositing, and that minor friction will be absent for most players, and acceptable to the others, especially if pulled off well by the AAA publishers (built-in wallets into player accounts, etc).\n- We at RMRK are working on this problem as part of CypherMOD (https://cyphermod.com) with master-derived ACL session keys. Stay tuned.\n')))}d.isMDXComponent=!0}}]);