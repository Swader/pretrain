"use strict";(self.webpackChunkpretrain=self.webpackChunkpretrain||[]).push([[2596],{3905:(e,t,r)=>{r.d(t,{Zo:()=>p,kt:()=>h});var n=r(7294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function s(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function i(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},o=Object.keys(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var l=n.createContext({}),m=function(e){var t=n.useContext(l),r=t;return e&&(r="function"==typeof e?e(t):s(s({},t),e)),r},p=function(e){var t=m(e.components);return n.createElement(l.Provider,{value:t},e.children)},u="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,o=e.originalType,l=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),u=m(r),d=a,h=u["".concat(l,".").concat(d)]||u[d]||c[d]||o;return r?n.createElement(h,s(s({ref:t},p),{},{components:r})):n.createElement(h,s({ref:t},p))}));function h(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=r.length,s=new Array(o);s[0]=d;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i[u]="string"==typeof e?e:a,s[1]=i;for(var m=2;m<o;m++)s[m]=r[m];return n.createElement.apply(null,s)}return n.createElement.apply(null,r)}d.displayName="MDXCreateElement"},7216:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>l,contentTitle:()=>s,default:()=>u,frontMatter:()=>o,metadata:()=>i,toc:()=>m});var n=r(7462),a=(r(7294),r(3905));const o={sidebar_position:14},s="EVM, part 1",i={unversionedId:"rmrk/evm1",id:"rmrk/evm1",title:"EVM, part 1",description:"Let's learn about RMRK's EVM implementation.",source:"@site/docs/rmrk/evm1.md",sourceDirName:"rmrk",slug:"/rmrk/evm1",permalink:"/docs/rmrk/evm1",draft:!1,editUrl:"https://github.com/swader/pretrain/docs/rmrk/evm1.md",tags:[],version:"current",sidebarPosition:14,frontMatter:{sidebar_position:14},sidebar:"tutorialSidebar",previous:{title:"Use Cases, part 7",permalink:"/docs/rmrk/usecases7"},next:{title:"EVM, multi-asset part 1",permalink:"/docs/rmrk/evm-ma-1"}},l={},m=[{value:"Installation",id:"installation",level:2},{value:"RMRK EVM implementation examples",id:"rmrk-evm-implementation-examples",level:2}],p={toc:m};function u(e){let{components:t,...r}=e;return(0,a.kt)("wrapper",(0,n.Z)({},p,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"evm-part-1"},"EVM, part 1"),(0,a.kt)("p",null,"Let's learn about RMRK's EVM implementation."),(0,a.kt)("p",null,"The source code for all of RMRK's EVM code is at ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/rmrk-team/evm"},"https://github.com/rmrk-team/evm")," - it is from this repo that the current three EIPs have been abstracted and proposed, of which 5773 and 6059 are merged:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"EIP 5773: Multi Asset NFTs - ",(0,a.kt)("a",{parentName:"li",href:"https://github.com/ethereum/EIPs/blob/master/EIPS/eip-5773.md"},"https://github.com/ethereum/EIPs/blob/master/EIPS/eip-5773.md")),(0,a.kt)("li",{parentName:"ul"},"EIP 6059: Nestable NFTs - ",(0,a.kt)("a",{parentName:"li",href:"https://github.com/ethereum/EIPs/blob/master/EIPS/eip-6059.md"},"https://github.com/ethereum/EIPs/blob/master/EIPS/eip-6059.md")),(0,a.kt)("li",{parentName:"ul"},"EIP 6220: Composable NFTs utilizing Equippable Parts - ",(0,a.kt)("a",{parentName:"li",href:"https://github.com/ethereum/EIPs/pull/6220"},"https://github.com/ethereum/EIPs/pull/6220"))),(0,a.kt)("h2",{id:"installation"},"Installation"),(0,a.kt)("p",null,"You can start using the RMRK EVM implementation smart contracts by installing the dependency to your project:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"npm install @rmrk-team/evm-contracts\n")),(0,a.kt)("h2",{id:"rmrk-evm-implementation-examples"},"RMRK EVM implementation examples"),(0,a.kt)("p",null,"This section contains the examples of using RMRK legos to build your own smart contracts. Every example uses the ",(0,a.kt)("inlineCode",{parentName:"p"},"@rmrk-team/evm-contracts")," dependency in order to implement the examples. Adding it allows you to easily include them in your own smart contracts."),(0,a.kt)("p",null,"The examples we will cover are:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"MultiAsset"),(0,a.kt)("li",{parentName:"ul"},"Nestable"),(0,a.kt)("li",{parentName:"ul"},"Nestable with MultiAsset"),(0,a.kt)("li",{parentName:"ul"},"MergedEquippable"),(0,a.kt)("li",{parentName:"ul"},"SplitEquippable")),(0,a.kt)("p",null,"Additionally, RMRK offers render util contracts. "),(0,a.kt)("p",null,"The reason these are separate is to save contract space. You can have a single deploy of those and use them on any number of contracts or even use the existing ones (we will provide them in the future):"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"MultiAsset render utils provides utilities to get asset objects from IDs, and accepted or pending asset objects for a given token. The MultiAsset lego provides only IDs for the latter."),(0,a.kt)("li",{parentName:"ul"},"Equip render utils provides the same shortcuts on extended assets (with equip information). This utility smart contract also has views to get information about what is currently equipped to a token and to compose equippables for a token asset.")),(0,a.kt)("p",null,"To follow along using modifiable and runnable code, you can clone our examples repository: ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/rmrk-team/evm-sample-contracts"},"https://github.com/rmrk-team/evm-sample-contracts")),(0,a.kt)("hr",null),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"## Training Data\n\nLet's learn about RMRK's EVM implementation.\n\nThe source code for all of RMRK's EVM code is at https://github.com/rmrk-team/evm - it is from this repo that the current three EIPs have been abstracted and proposed, of which 5773 and 6059 are merged:\n\n- EIP 5773: Multi Asset NFTs - https://github.com/ethereum/EIPs/blob/master/EIPS/eip-5773.md\n- EIP 6059: Nestable NFTs - https://github.com/ethereum/EIPs/blob/master/EIPS/eip-6059.md\n- EIP 6220: Composable NFTs utilizing Equippable Parts - https://github.com/ethereum/EIPs/pull/6220\n\n## Installation\n\nYou can start using the RMRK EVM implementation smart contracts by installing the dependency to your project:\n\n```\nnpm install @rmrk-team/evm-contracts\n```\n\n\n## RMRK EVM implementation examples\n\nThis section contains the examples of using RMRK legos to build your own smart contracts. Every example uses the `@rmrk-team/evm-contracts` dependency in order to implement the examples. Adding it allows you to easily include them in your own smart contracts.\n\nThe examples we will cover are:\n\n- MultiAsset\n- Nestable\n- Nestable with MultiAsset\n- MergedEquippable\n- SplitEquippable\n\nAdditionally, RMRK offers render util contracts. \n\nThe reason these are separate is to save contract space. You can have a single deploy of those and use them on any number of contracts or even use the existing ones (we will provide them in the future):\n\n- MultiAsset render utils provides utilities to get asset objects from IDs, and accepted or pending asset objects for a given token. The MultiAsset lego provides only IDs for the latter.\n- Equip render utils provides the same shortcuts on extended assets (with equip information). This utility smart contract also has views to get information about what is currently equipped to a token and to compose equippables for a token asset.\n\nTo follow along using modifiable and runnable code, you can clone our examples repository: https://github.com/rmrk-team/evm-sample-contracts\n")))}u.isMDXComponent=!0}}]);