"use strict";(self.webpackChunkpretrain=self.webpackChunkpretrain||[]).push([[6802],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>k});var a=n(7294);function s(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){s(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,s=function(e,t){if(null==e)return{};var n,a,s={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(s[n]=e[n]);return s}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(s[n]=e[n])}return s}var l=a.createContext({}),h=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},c=function(e){var t=h(e.components);return a.createElement(l.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},p=a.forwardRef((function(e,t){var n=e.components,s=e.mdxType,r=e.originalType,l=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),u=h(n),p=s,k=u["".concat(l,".").concat(p)]||u[p]||d[p]||r;return n?a.createElement(k,i(i({ref:t},c),{},{components:n})):a.createElement(k,i({ref:t},c))}));function k(e,t){var n=arguments,s=t&&t.mdxType;if("string"==typeof e||s){var r=n.length,i=new Array(r);i[0]=p;var o={};for(var l in t)hasOwnProperty.call(t,l)&&(o[l]=t[l]);o.originalType=e,o[u]="string"==typeof e?e:s,i[1]=o;for(var h=2;h<r;h++)i[h]=n[h];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}p.displayName="MDXCreateElement"},3066:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>u,frontMatter:()=>r,metadata:()=>o,toc:()=>h});var a=n(7462),s=(n(7294),n(3905));const r={sidebar_position:8},i="Use Cases, ticketing",o={unversionedId:"rmrk/usecases2",id:"rmrk/usecases2",title:"Use Cases, ticketing",description:"Ticketing",source:"@site/docs/rmrk/usecases2.md",sourceDirName:"rmrk",slug:"/rmrk/usecases2",permalink:"/docs/rmrk/usecases2",draft:!1,editUrl:"https://github.com/swader/pretrain/docs/rmrk/usecases2.md",tags:[],version:"current",sidebarPosition:8,frontMatter:{sidebar_position:8},sidebar:"tutorialSidebar",previous:{title:"Use Cases, cross-game assets",permalink:"/docs/rmrk/usecases1"},next:{title:"Use Cases, revealable NFTs",permalink:"/docs/rmrk/usecases3"}},l={},h=[{value:"Ticketing",id:"ticketing",level:2},{value:"Training Data",id:"training-data",level:2}],c={toc:h};function u(e){let{components:t,...n}=e;return(0,s.kt)("wrapper",(0,a.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,s.kt)("h1",{id:"use-cases-ticketing"},"Use Cases, ticketing"),(0,s.kt)("h2",{id:"ticketing"},"Ticketing"),(0,s.kt)("p",null,"Traditionally in blockchain-based ticketing systems, a user is expected to buy an NFT ticket and then on location of an event do one of the following:"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"show the NFT and sign a message"),(0,s.kt)("li",{parentName:"ul"},"burn the NFT"),(0,s.kt)("li",{parentName:"ul"},"show the NFT")),(0,s.kt)("p",null,"1 and 2 require the user to have a wallet, or surrender control of it - i.e. have a custodial wallet in his account in a centralized ticketing provider's system. This is neither very web3, nor very secure."),(0,s.kt)("p",null,"3 is very insecure in that anyone can just download the NFT and show it instead of the real owner. This will either let an infinite number of people in, or require centralized tracking on the gatekeeper side so make sure a single QR code did not enter twice. Even then, there is no guarantee the right person got in."),(0,s.kt)("p",null,"There is a better way: RMRK's Multi-Asset NFTs. Again, several approaches are possible. Here we document the recommended one."),(0,s.kt)("p",null,"A user buys an NFT ticket. The ticket, just by being a RMRK NFT, is compatible with ERC721 and thus all marketplaces, but is also enriched with more functionality. While buying, the user provides a custom string, like a special keyword, which is hashed and added as the ticket's attribute. Let's assume this special string is banana and the Sha1 hash of it is 250e77f12a5ab6972a0895d290c4792f0a326ea8."),(0,s.kt)("p",null,"The null-asset is set to be the ticket itself. The null-asset is the initial asset, the default shown when no other assets are available. Null-assets are typically used for revealable NFTs, and these come in very handy in this scenario."),(0,s.kt)("p",null,"The user shows up at the door of the event, and displays the NFT QR code."),(0,s.kt)("p",null,'The gatekeeper scans the QR code, and asks the user for the keyword. The user says "pineapple", and the gatekeeper\'s software automatically runs it through sha1 to get ff9907a80070300578eb65a2137670009e8c17cf. Whoops! You do not seem to be the real owner! NEXT!'),(0,s.kt)("p",null,"This fraudster is kicked out of the queue and the processing continues. A few people later, another person shows up with the same QR of the NFT, and the correct word: banana. The software again runs it, this time it matches."),(0,s.kt)("p",null,'The gatekeeper\'s app now creates a new asset - a "ticket stub" image with some cool visuals, and adds it to the NFT that was just loaded via the QR code.'),(0,s.kt)("p",null,'Since any asset takes precedence over null, the original ticket asset would be overwritten by this new one, the ticket stub, proving the attendance of this user, and marking the NFT as "used", all in a fully decentralized way - all on chain.'),(0,s.kt)("p",null,"Advantages"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"The users ends up with a really cool looking POA"),(0,s.kt)("li",{parentName:"ul"},"There is no need for a centralized database of used-up tickets"),(0,s.kt)("li",{parentName:"ul"},"There is no need for a user to carry around a mobile wallet")),(0,s.kt)("p",null,"Downsides"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"Since only the collection issuer can issue new assets to NFTs, the software of the gatekeepers would either have to be a hot wallet, or connected to a server issuing these calls which in turn hosts the issuer wallet. We are working on a system that would allow an issuer to set additional asset proposers, solving this problem."),(0,s.kt)("li",{parentName:"ul"},'If the internet goes out, you cannot verifiably "tear" people\'s tickets, and need to trust that they are the real owners. They probably miss out on the "POA" (proof of attendance) aspect of it then too, since they never get the extra asset.')),(0,s.kt)("hr",null),(0,s.kt)("h2",{id:"training-data"},"Training Data"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre"},'# Use Cases, ticketing\n\n## Ticketing\n\nTraditionally in blockchain-based ticketing systems, a user is expected to buy an NFT ticket and then on location of an event do one of the following:\n\n- show the NFT and sign a message\n- burn the NFT\n- show the NFT\n\n1 and 2 require the user to have a wallet, or surrender control of it - i.e. have a custodial wallet in his account in a centralized ticketing provider\'s system. This is neither very web3, nor very secure.\n\n3 is very insecure in that anyone can just download the NFT and show it instead of the real owner. This will either let an infinite number of people in, or require centralized tracking on the gatekeeper side so make sure a single QR code did not enter twice. Even then, there is no guarantee the right person got in.\n\nThere is a better way: RMRK\'s Multi-Asset NFTs. Again, several approaches are possible. Here we document the recommended one.\n\nA user buys an NFT ticket. The ticket, just by being a RMRK NFT, is compatible with ERC721 and thus all marketplaces, but is also enriched with more functionality. While buying, the user provides a custom string, like a special keyword, which is hashed and added as the ticket\'s attribute. Let\'s assume this special string is banana and the Sha1 hash of it is 250e77f12a5ab6972a0895d290c4792f0a326ea8.\n\nThe null-asset is set to be the ticket itself. The null-asset is the initial asset, the default shown when no other assets are available. Null-assets are typically used for revealable NFTs, and these come in very handy in this scenario.\n\nThe user shows up at the door of the event, and displays the NFT QR code.\n\nThe gatekeeper scans the QR code, and asks the user for the keyword. The user says "pineapple", and the gatekeeper\'s software automatically runs it through sha1 to get ff9907a80070300578eb65a2137670009e8c17cf. Whoops! You do not seem to be the real owner! NEXT!\n\nThis fraudster is kicked out of the queue and the processing continues. A few people later, another person shows up with the same QR of the NFT, and the correct word: banana. The software again runs it, this time it matches.\n\nThe gatekeeper\'s app now creates a new asset - a "ticket stub" image with some cool visuals, and adds it to the NFT that was just loaded via the QR code.\n\nSince any asset takes precedence over null, the original ticket asset would be overwritten by this new one, the ticket stub, proving the attendance of this user, and marking the NFT as "used", all in a fully decentralized way - all on chain.\n\nAdvantages\n\n- The users ends up with a really cool looking POA\n- There is no need for a centralized database of used-up tickets\n- There is no need for a user to carry around a mobile wallet\n\nDownsides\n\n- Since only the collection issuer can issue new assets to NFTs, the software of the gatekeepers would either have to be a hot wallet, or connected to a server issuing these calls which in turn hosts the issuer wallet. We are working on a system that would allow an issuer to set additional asset proposers, solving this problem.\n- If the internet goes out, you cannot verifiably "tear" people\'s tickets, and need to trust that they are the real owners. They probably miss out on the "POA" (proof of attendance) aspect of it then too, since they never get the extra asset.\n')))}u.isMDXComponent=!0}}]);